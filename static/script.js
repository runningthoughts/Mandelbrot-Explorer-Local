// JavaScript Document

// =======================================================================
// Some of this code was autogenerated by OpenAI's o1-preview and o1-mini.
// There are stylistic differences as a result.
// =======================================================================

//==========================
// o1-preview generated code
//==========================
//document.addEventListener('DOMContentLoaded', function () {
//    const centerXInput = document.getElementById('centerX');
//    const centerYInput = document.getElementById('centerY');
//    const zoomInput = document.getElementById('zoom');
//    const maxIterInput = document.getElementById('maxIter');
//    const colorMapSelect = document.getElementById('colorMap');
//    const generateButton = document.getElementById('generateButton');
//    const resetButton = document.getElementById('resetButton');
    const fractalImage = document.getElementById('fractalImage');

// Default parameters

const	maxIterations = 200;
const 	defaultParams = {
		centerX: -0.5,
		centerY: 0.0,
		zoom: 1.0,
		maxIter: 200,
		colorMap: 'viridis'
	};

//==========================
// Hand-written code
//==========================
var incrementXY = 0.25,
	zoomLevel = 1,
	zoomFactor = 1.5;

const	imageSize = 1200; // pixels- this is from Python, so needs hard coded here for simplicity's sake

document.addEventListener('DOMContentLoaded', function() {
   generateFractal();
}, false);

//    generateButton.addEventListener('click', function () {
//        generateFractal();
//    });

function resetFactors() {
	incrementXY = 0.25;
	zoomLevel = 1;
	zoomFactor = 1.5;
}

function resetValues() {
	document.getElementById('centerX').value = defaultParams.centerX;
	document.getElementById('centerY').value = defaultParams.centerY;
	document.getElementById('zoom').value = defaultParams.zoom;
//	document.getElementById('maxIter').value = defaultParams.maxIter;
	document.getElementById('colorMap').value = defaultParams.colorMap;
	resetFactors();
	generateFractal();
};

//});


//==========================
// Hand-written code
//==========================
//========================================
// Whenever Zoom is changed, increments 
// for X,Y need to change correspondingly.
// As well, the Zoom increment also needs
// to change. The more you Zoom in, the
// smaller the increments for the next
// zoom. And the opposite for Zoom out.
//========================================
function adjustValuesXYZoom (zoomLevel) {

}

//========================================
// Providing some presets to allow the
// user to jump to points in the
// Mandelbrot set
//========================================

function preset(presetNum) {
	switch (presetNum) {
		case 1:
			document.getElementById('centerX').value = -0.5;
			document.getElementById('centerY').value = -0.605;
			document.getElementById('zoom').value = 150;
//			document.getElementById('maxIter').value = 200;
			document.getElementById('colorMap').value = 'viridis';
			break;
		case 2:
			document.getElementById('centerX').value = -1.15;
			document.getElementById('centerY').value = -0.275;
			document.getElementById('zoom').value = 30;
//			document.getElementById('maxIter').value = 200;
			document.getElementById('colorMap').value = 'inferno';
			break;
		case 3:
			document.getElementById('centerX').value = -0.8;
			document.getElementById('centerY').value = 0.181;
			document.getElementById('zoom').value = 200;
//			document.getElementById('maxIter').value = 200;
			document.getElementById('colorMap').value = 'seismic';
			break;
		case 4:
			document.getElementById('centerX').value = 0.27;
			document.getElementById('centerY').value = -0.005;
			document.getElementById('zoom').value = 1000;
//			document.getElementById('maxIter').value = 200;
			document.getElementById('colorMap').value = 'BrBG';
			break;
		case 5:
			document.getElementById('centerX').value = -0.483;
			document.getElementById('centerY').value = -0.625;
			document.getElementById('zoom').value = 1000;
//			document.getElementById('maxIter').value = 200;
			document.getElementById('colorMap').value = 'twilight';
			break;
		case 6:
			document.getElementById('centerX').value = -1.04;
			document.getElementById('centerY').value = 0.349;
			document.getElementById('zoom').value = 800;
//			document.getElementById('maxIter').value = 200;
			document.getElementById('colorMap').value = 'nipy_spectral';
	}
	generateFractal();
}

//==========================
// o1-mini generated code +
// Handwritten code for the
// logic sections
//==========================

//========================================
// Movement Increments is affected by
// Zoom levels
//========================================
function move(direction) {
		const centerXInput = document.getElementById('centerX');
		const centerYInput = document.getElementById('centerY');
		const increment = 0.1;
		switch (direction) {
			case 'up':
				centerYInput.value = parseFloat(centerYInput.value) + incrementXY;
				break;
			case 'down':
				centerYInput.value = parseFloat(centerYInput.value) - incrementXY;
				break;
			case 'left':
				centerXInput.value = parseFloat(centerXInput.value) - incrementXY;
				break;
			case 'right':
				centerXInput.value = parseFloat(centerXInput.value) + incrementXY;
				break;
			case 'upleft':
				centerXInput.value = parseFloat(centerXInput.value) + incrementXY;
				centerYInput.value = parseFloat(centerYInput.value) + incrementXY;
				break;
			case 'upright':
				centerXInput.value = parseFloat(centerXInput.value) - incrementXY;
				centerYInput.value = parseFloat(centerYInput.value) + incrementXY;
				break;
			case 'downleft':
				centerXInput.value = parseFloat(centerXInput.value) + incrementXY;
				centerYInput.value = parseFloat(centerYInput.value) - incrementXY;
				break;
			case 'downright':
				centerXInput.value = parseFloat(centerXInput.value) - incrementXY;
				centerYInput.value = parseFloat(centerYInput.value) - incrementXY;
				break;
		}
		generateFractal();
	}

function resetCenter() {
	const centerXInput = document.getElementById('centerX');
	const centerYInput = document.getElementById('centerY');
	centerXInput.value = -0.5;
	centerYInput.value = 0.0;
	generateFractal();
}

function zoom(direction) {
	const zoomInput = document.getElementById('zoom');
	if (direction === 'in') {
		zoomInput.value = parseFloat(zoomInput.value) * zoomFactor;
	} else if (direction === 'out') {
		zoomInput.value = parseFloat(zoomInput.value) / zoomFactor;
	}
	zoomLevel = zoomInput.value;
	incrementXY = 1/zoomLevel;

	generateFractal();
}

function resetZoom() {
	const zoomInput = document.getElementById('zoom');
	zoomInput.value = 1.0;
	generateFractal();
}

//==========================
// o1-preview generated code
//==========================
const apiEndpoint = 'http://localhost:5000/';
//const apiEndpoint = 'https://vzcac9k5w8.execute-api.us-east-2.amazonaws.com/Prod/';

function generateFractal() {
	console.log("Generating...");
	fractalImage.src = "generating.png"
    const centerXInput = document.getElementById('centerX');
    var centerYInput = document.getElementById('centerY');
    var zoomInput = document.getElementById('zoom');
    var maxIterInput = maxIterations;
    var colorMapSelect = document.getElementById('colorMap');

	const formData = new FormData();
	formData.append('center_x', centerXInput.value);
	formData.append('center_y', centerYInput.value);
	formData.append('zoom', zoomInput.value);
	formData.append('max_iter', maxIterations);
	formData.append('color_map', colorMapSelect.value);

	fetch(`${apiEndpoint}generate`, {
		method: 'POST',
		body: formData
	})
	.then(response => response.blob())
	.then(blob => {
		const url = URL.createObjectURL(blob);
		fractalImage.src = url;
	})
	.catch(error => {
		console.error('Error generating fractal:', error);
	});
}

// Generate the initial fractal
generateFractal();
